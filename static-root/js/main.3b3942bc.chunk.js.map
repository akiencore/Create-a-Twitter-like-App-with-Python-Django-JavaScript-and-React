{
  "version": 3,
  "sources": [
    "logo.svg",
    "lookup/components.js",
    "tweets/buttons.js",
    "tweets/lookup.js",
    "tweets/detail.js",
    "tweets/list.js",
    "tweets/create.js",
    "tweets/components.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "module",
    "exports",
    "__webpack_require__",
    "p",
    "backendLookup",
    "method",
    "endpoint",
    "callback",
    "data",
    "jsonData",
    "JSON",
    "stringify",
    "xhr",
    "XMLHttpRequest",
    "url",
    "concat",
    "responseType",
    "open",
    "csrftoken",
    "name",
    "cookieValue",
    "document",
    "cookie",
    "cookies",
    "split",
    "i",
    "length",
    "trim",
    "substring",
    "decodeURIComponent",
    "getCookie",
    "setRequestHeader",
    "onload",
    "status",
    "response",
    "detail",
    "window",
    "location",
    "href",
    "onerror",
    "e",
    "console",
    "log",
    "message",
    "send",
    "ActionBtn",
    "props",
    "tweet",
    "action",
    "didPerformAction",
    "likes",
    "className",
    "actionDisplay",
    "display",
    "handleActionBackendEvent",
    "type",
    "react_default",
    "a",
    "createElement",
    "onClick",
    "event",
    "preventDefault",
    "tweetId",
    "id",
    "apiTweetAction",
    "ParentTweet",
    "parent",
    "Tweet",
    "hideActions",
    "didRetweet",
    "_useState",
    "useState",
    "_useState2",
    "Object",
    "slicedToArray",
    "actionTweet",
    "setActionTweet",
    "match",
    "pathname",
    "_wrapRegExp",
    "tweetid",
    "urlTweetId",
    "groups",
    "isDetail",
    "handlePerformAction",
    "newActionTweet",
    "content",
    "Fragment",
    "TweetsList",
    "tweetsInit",
    "setTweetsInit",
    "_useState3",
    "_useState4",
    "tweets",
    "setTweets",
    "_useState5",
    "_useState6",
    "tweetsDidSet",
    "setTweetsDidSet",
    "useEffect",
    "final",
    "toConsumableArray",
    "newTweets",
    "username",
    "apiTweetList",
    "alert",
    "handleDidRetweet",
    "newTweet",
    "updateTweetsInit",
    "unshift",
    "updateFinalTweets",
    "map",
    "item",
    "index",
    "key",
    "TweetCreate",
    "textAreaRef",
    "React",
    "createRef",
    "didTweet",
    "handleBackendUpdate",
    "onSubmit",
    "newVal",
    "current",
    "value",
    "ref",
    "required",
    "TweetsComponent",
    "setNewTweets",
    "canTweet",
    "tempNewTweets",
    "assign",
    "TweetDetailComponent",
    "didLookup",
    "setDidLookup",
    "setTweet",
    "handleBackendLookup",
    "apiTweetDetail",
    "App",
    "src",
    "logo",
    "alt",
    "target",
    "rel",
    "Boolean",
    "hostname",
    "appEl",
    "getElementById",
    "ReactDOM",
    "render",
    "src_App",
    "tweetsEl",
    "MyComponent",
    "dataset",
    "querySelectorAll",
    "forEach",
    "container",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister",
    "catch",
    "error"
  ],
  "mappings": "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",
  "file": "static/js/main.3b3942bc.chunk.js",
  "sourcesContent": [
    "module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";",
    "function getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== \"\") {\n    var cookies = document.cookie.split(\";\");\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest();\n  const url = `http://localhost:80/api${endpoint}`;\n\n  xhr.responseType = \"json\";\n  xhr.open(method, url);\n\n  const csrftoken = getCookie(\"csrftoken\");\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n  if (csrftoken) {\n    //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n\n  xhr.onload = function () {\n    if (xhr.status === 403) {\n      const detail = xhr.response.detail;\n      if(detail === \"Authentication credentials were not provided.\"){\n        window.location.href = \"/login?showLoginRequired=true\"\n      }\n    }\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = function (e) {\n    console.log(\"error\", e);\n    callback({ message: \"The request was an error\" }, 400);\n  };\n  //console.log(jsonData)\n  xhr.send(jsonData);\n}\n",
    "import React from \"react\";\n\nimport { apiTweetAction } from \"./lookup\";\n\nexport function ActionBtn(props) {\n    const { tweet, action, didPerformAction } = props;\n    const likes = tweet.likes ? tweet.likes : 0;\n  \n    const className = props.className\n      ? props.className\n      : \"btn btn-primary btn-sm\";\n    const actionDisplay = action.display ? action.display : \"Action\"; //ensure that we have an action\n  \n    const handleActionBackendEvent = (response, status) => {\n      console.log(response, status);\n  \n      if ((status === 200 || status === 201) && didPerformAction) {\n        didPerformAction(response, status);\n      }\n    };\n    const handleClick = (event) => {\n      event.preventDefault();\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent);\n    };\n  \n    const display =\n      action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\n    return (\n      <button className={className} onClick={handleClick}>\n        {display}\n      </button>\n    );\n  }",
    "import { backendLookup } from \"../lookup\";\n\nexport function apiTweetCreate(newTweet, callback) {\n  backendLookup(\"POST\", \"/tweets/create/\", callback, { content: newTweet });\n}\n\nexport function apiTweetAction(tweetId, action, callback) {\n  const data = { id: tweetId, action: action };\n  backendLookup(\"POST\", \"/tweets/action/\", callback, data);\n}\n\nexport function apiTweetDetail(tweetId, callback) {\n  backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\n}\n\nexport function apiTweetList(username, callback) {\n  let endpoint = \"/tweets/\"\n  if(username){\n    endpoint = `/tweets/?username=${username}`\n  }\n\n  backendLookup(\"GET\", endpoint, callback);\n}",
    "import React, { useState } from \"react\";\n\nimport { ActionBtn } from \"./buttons\";\n\nexport function ParentTweet(props) {\n  const { tweet } = props;\n  return tweet.parent ? (\n    <div className=\"row\">\n      <div className=\"col-11 mx-auto p-3 border rounded\">\n        <p className=\"mb-0 text-muted small\">Retweet</p>\n        <Tweet hideActions className={\" \"} tweet={tweet.parent} />\n      </div>\n    </div>\n  ) : null;\n}\n\nexport function Tweet(props) {\n  const { tweet, didRetweet, hideActions } = props;\n\n  const [actionTweet, setActionTweet] = useState(\n    props.tweet ? props.tweet : null\n  );\n\n  const className = props.className\n    ? props.className\n    : \"col-10 mx-auto col-md-6\";\n\n  const path = window.location.pathname;\n  const match = path.match(/(?<tweetid>\\d+)/);\n  const urlTweetId = match ? match.groups.tweetid : -1;\n\n  //const isDetail = false;\n  const isDetail = `${tweet.id}` === `${urlTweetId}`;\n\n  const handleLink = (event) => {\n    event.preventDefault();\n    window.location.href = `/${tweet.id}`;\n  };\n\n  const handlePerformAction = (newActionTweet, status) => {\n    if (status === 200) {\n      setActionTweet(newActionTweet);\n    } else if (status === 201) {\n      if (didRetweet) {\n        didRetweet(newActionTweet);\n      }\n    }\n  };\n\n  \n  return (\n    <div className={className}>\n      <div>\n        <p>\n          {tweet.id} - {tweet.content}\n        </p>\n        <ParentTweet tweet={tweet} />\n      </div>\n      <div className=\"btn btn-group\">\n        {actionTweet && hideActions !== true && (\n          <React.Fragment>\n            <ActionBtn\n              tweet={actionTweet}\n              didPerformAction={handlePerformAction}\n              action={{ type: \"like\", display: \"Likes\" }}\n            />\n            <ActionBtn\n              tweet={actionTweet}\n              didPerformAction={handlePerformAction}\n              action={{ type: \"unlike\", display: \"Unlike\" }}\n            />\n            <ActionBtn\n              tweet={actionTweet}\n              didPerformAction={handlePerformAction}\n              action={{ type: \"retweet\", display: \"Retweet\" }}\n            />\n          </React.Fragment>\n        )}\n        {isDetail === true ? null : ( //new\n          <button className=\"btn btn-outline-primary btn-sm\" onClick={handleLink}>\n            View\n          </button>\n        )}\n      </div>\n    </div>\n  );\n  /*\n  return (\n    <div className={className}>\n      <div>\n        <p>\n          {tweet.id} - {tweet.content}\n        </p>\n        <ParentTweet tweet={tweet} />\n      </div>\n      {actionTweet && hideActions !== true && (\n        <div className=\"btn btn-group\">\n          <ActionBtn\n            tweet={actionTweet}\n            didPerformAction={handlePerformAction}\n            action={{ type: \"like\", display: \"Likes\" }}\n          />\n          <ActionBtn\n            tweet={actionTweet}\n            didPerformAction={handlePerformAction}\n            action={{ type: \"unlike\", display: \"Unlike\" }}\n          />\n          <ActionBtn\n            tweet={actionTweet}\n            didPerformAction={handlePerformAction}\n            action={{ type: \"retweet\", display: \"Retweet\" }}\n          />\n          {isDetail === true ? null : ( //new\n            <button className=\"btn btn-outline-primary\" onClick={handleLink}>\n              View\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n    */\n  \n}\n",
    "import React, { useEffect, useState } from \"react\";\n\nimport { apiTweetList } from \"./lookup\";\n\nimport { Tweet } from \"./detail\";\n\nexport function TweetsList(props) {\n  //console.log(props.username)\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit); //[...content] means a new list with the content\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  //new\n  const handleDidRetweet = (newTweet) => {\n    const updateTweetsInit = [...tweetsInit]; //grabbing tweetsInit list\n    updateTweetsInit.unshift(newTweet); //add newTweet to the beginning of updateTweetsInit\n    setTweetsInit(updateTweetsInit); //update status\n    const updateFinalTweets = [...tweets]; //grabbing tweets list\n    updateFinalTweets.unshift(tweets); //add tweets to the beginning of updateFinalTweets\n    setTweets(updateFinalTweets); //update status\n  };\n\n  return tweets.map((item, index) => {\n    return (\n      <Tweet\n        tweet={item}\n        didRetweet={handleDidRetweet} //new\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={`${index}-{item.id}`}\n      />\n    );\n  });\n}\n",
    "import React from \"react\";\n\nimport { apiTweetCreate } from \"./lookup\";\n\nexport function TweetCreate(props) {\n  const textAreaRef = React.createRef();\n\n  const { didTweet } = props;\n\n  const handleBackendUpdate = (response, status) => {\n    if (status === 201) {\n      didTweet(response);\n    } else {\n      console.log(response);\n      alert(\"An error occured please try again\");\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newVal = textAreaRef.current.value;\n\n    console.log(\"new value\", newVal);\n\n    apiTweetCreate(newVal, handleBackendUpdate);\n\n    textAreaRef.current.value = \"\"; //after the submission, clear the textarea\n  };\n\n  return (\n    <div className={props.className}>\n      <form onSubmit={handleSubmit}>\n        <textarea\n          ref={textAreaRef}\n          required={true}\n          className=\"form-control\"\n          name=\"tweet\"\n        ></textarea>\n        <button type=\"submit\" className=\"btn btn-primary my-3\">\n          Tweet\n        </button>\n      </form>\n    </div>\n  );\n}\n",
    "import React, {\n  useState,\n  useEffect, //new\n} from \"react\";\n\nimport { TweetsList } from \"./list\";\n\nimport { TweetCreate } from \"./create\";\n\nimport { apiTweetDetail } from \"./lookup\"; //new\nimport { Tweet } from \"./detail\"; //new\n\nexport function TweetsComponent(props) {\n  const [newTweets, setNewTweets] = useState([]);\n\n  const canTweet = props.canTweet === \"false\" ? false : true;\n\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets];\n\n    tempNewTweets.unshift(newTweet);\n    setNewTweets(tempNewTweets);\n  };\n\n  return (\n    <div className={props.className}>\n      {canTweet === true && (\n        <TweetCreate didTweet={handleNewTweet} className=\"col-12 mb-3\" />\n      )}\n      <TweetsList newTweets={newTweets} {...props} />\n    </div>\n  );\n}\n\nexport function TweetDetailComponent(props) {\n  const { tweetId } = props; //grab id from props\n  const [didLookup, setDidLookup] = useState(false);\n  const [tweet, setTweet] = useState(null);\n\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response);\n    } else {\n      alert(\"There was an error finding your tweet.\");\n    }\n  };\n  useEffect(() => {\n    if (didLookup === false) {\n      apiTweetDetail(tweetId, handleBackendLookup);\n      setDidLookup(true);\n    }\n  }, [tweetId, didLookup, setDidLookup]);\n\n  return tweet === null ? null : (\n    <Tweet tweet={tweet} className={props.className} />\n  ); //return the requested tweet with tweetID found, or return null\n}\n",
    "import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//import {TweetsList} from './tweets'\nimport {TweetsComponent} from './tweets'\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n\n        <div>\n          <TweetsComponent />\n        </div>\n        \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport {\n  TweetsComponent,\n  TweetDetailComponent, //new\n} from \"./tweets\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement;\nconst tweetsEl = document.getElementById(\"tweetme-2\");\nif (tweetsEl) {\n  const MyComponent = e(TweetsComponent, tweetsEl.dataset);\n  ReactDOM.render(MyComponent, tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\"); //get all elements with this class\n\n//render for each tweet detail element\ntweetDetailElements.forEach((container) => {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
