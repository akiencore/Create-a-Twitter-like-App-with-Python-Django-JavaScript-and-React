{
  "version": 3,
  "sources": [
    "logo.svg",
    "tweets/components.js",
    "lookup/lookup.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "module",
    "exports",
    "__webpack_require__",
    "p",
    "TweetsComponent",
    "props",
    "textAreaRef",
    "React",
    "createRef",
    "_useState",
    "useState",
    "_useState2",
    "Object",
    "slicedToArray",
    "newTweets",
    "setNewTweets",
    "react_default",
    "a",
    "createElement",
    "className",
    "onSubmit",
    "event",
    "preventDefault",
    "newVal",
    "current",
    "value",
    "tempNewTweets",
    "toConsumableArray",
    "unshift",
    "content",
    "likes",
    "id",
    "ref",
    "required",
    "name",
    "type",
    "TweetsList",
    "_useState3",
    "_useState4",
    "tweetsInit",
    "setTweetsInit",
    "_useState5",
    "_useState6",
    "tweets",
    "setTweets",
    "useEffect",
    "final",
    "concat",
    "length",
    "callback",
    "xhr",
    "XMLHttpRequest",
    "responseType",
    "open",
    "onload",
    "response",
    "status",
    "onerror",
    "e",
    "console",
    "log",
    "message",
    "send",
    "loadTweets",
    "alert",
    "map",
    "item",
    "index",
    "Tweet",
    "tweet",
    "key",
    "ActionBtn",
    "action",
    "_useState7",
    "_useState8",
    "setLikes",
    "_useState9",
    "userLike",
    "_useState10",
    "setUserLike",
    "actionDisplay",
    "display",
    "onClick",
    "App",
    "src",
    "logo",
    "alt",
    "href",
    "target",
    "rel",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "appEl",
    "document",
    "getElementById",
    "ReactDOM",
    "render",
    "src_App",
    "tweetsEl",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister",
    "catch",
    "error"
  ],
  "mappings": "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",
  "file": "static/js/main.d4e98ece.chunk.js",
  "sourcesContent": [
    "module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";",
    "import React, {useEffect, useState} from 'react'\n\nimport {loadTweets} from '../lookup'\n  \nexport function TweetsComponent(props) {\n\n    const textAreaRef = React.createRef()\n\n    const [newTweets, setNewTweets] = useState([])\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({ //put it to the beginning\n          content: newVal,\n          likes: 0,\n          id: 12313\n        })\n        setNewTweets(tempNewTweets)\n\n        textAreaRef.current = '' //after the submission, clear the textarea\n    }\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n        <TweetsList newTweets={newTweets}/>\n    </div>\n}\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    useEffect(() => {\n      const final = [...props.newTweets].concat(tweetsInit) //[...content] means a new list with the content\n      if(final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n    \n    useEffect(() => {\n      const myCallback = (response, status) => {\n        if (status === 200){\n          setTweetsInit(response)\n        } else { \n          alert(\"There was an error\")\n        }\n      }\n      loadTweets(myCallback) \n    }, [])\n  \n  //return tweetsInit.map((item, index) => {\n    return tweets.map((item, index) => {\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n    })\n}\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0) \n\n    //const [justClicked, setJustClicked] = useState(false)\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\n\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action' //ensure that we have an action\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            //if(justClicked === true){\n            if(userLike === true){\n                setLikes(likes-1)\n                setUserLike(false)\n            } else {\n                setLikes(likes+1)\n                setUserLike(true)\n            }\n            //setLikes(tweet.likes+1)\n        }\n      }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n  \n  \nexport function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{tweet.id} - {tweet.content}</p>\n        <div className='btn btn-group'>\n          <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}}/>\n          <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Unlike\"}}/>\n          <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"Retweet\"}}/>\n        </div>\n    </div>\n}",
    "export function loadTweets(callback){\n    const xhr = new XMLHttpRequest()\n    const method = 'GET'\n    const url = \"http://localhost:80/api/tweets/\"\n    const responseType = 'json'\n  \n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400) //when status 400, callback \"The request was an error\"\n    }\n    xhr.send()\n  }",
    "import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//import {TweetsList} from './tweets'\nimport {TweetsComponent} from './tweets'\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n\n        <div>\n          <TweetsComponent />\n        </div>\n        \n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {TweetsComponent} from './tweets'\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n/*\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
